#include "{{ parse_hpp }}"
#include "{{ types_hpp }}"
{% for dep in type_deps %}
#include "{{dep}}"
{% endfor %}
{% for dep in parse_deps %}
#include "{{dep}}"
{% endfor %}

{% if namespace %}
namespace {{ namespace }} {
{% endif %}

{% for struct in structs %}
{{ struct.name }} Parse{{ struct.name }}(InputBuffer& buf)
{
  {{ struct.name }} res;
  buf.Expect('{');

  string id;
  while (true)
  {
    buf.SkipWhitespace();
    // check for a closing tag
    if (buf.ConsumeIf('}'))
      break;

    id = ParseIdentifier(buf);
    buf.SkipWhitespace();

    {% for member in struct.members %}
    {% if loop.first %}
    if (id == "{{ member.name }}")
    {% else %}
    else if (id == "{{ member.name }}")
    {% endif %}
    {
      {% if member.is_array %}
      buf.SkipWhitespace();
      buf.Expect('[');

      while (true)
      {
        buf.SkipWhitespace();

        // check for the closing ']'
        if (buf.ConsumeIf(']'))
          break;

        // parse the value
        res.{{ member.name }}.push_back({{ member.parser }}(buf));

        buf.SkipWhitespace();
        buf.ConsumeIf(',');
      }
      buf.SkipWhitespace();
      buf.Expect(';');

      {% else %}
      res.{{ member.name }} = {{ member.parser }}(buf);
      buf.SkipWhitespace();
      buf.Expect(';');
      {% endif %}
    }
    {% endfor %}
  }
  return res;
}

{% endfor %}

{% for struct in structs %}
void Serialize(OutputBuffer& buf, const {{ struct.name }}& msg)
{
  buf.EnsureCapacity(32);
  buf.Advance(sprintf(buf.Cur(), "{\n"));

  {% for member in struct.members %}
  {{ member.writer }}(buf, 2, "{{ member.name }}", msg.{{ member.name }});
  {% endfor %}

  buf.Advance(sprintf(buf.Cur(), "};\n"));
}

void Serialize(OutputBuffer& buf, int indent, const char* member, const {{ struct.name }}& msg)
{
  int len = (int)strlen(member);
  buf.EnsureCapacity(len + indent + 16);
  buf.Advance(sprintf(buf.Cur(), "%*s: {\n", len + indent, member));

  {% for member in struct.members %}
  {{ member.writer }}(buf, indent + 2, "{{ member.name }}", msg.{{ member.name }});
  {% endfor %}

  buf.Advance(sprintf(buf.Cur(), "%*s", 3 + indent, "};\n"));
}

{% endfor %}


{% if namespace %}
}
{% endif %}
